<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2024-02-16 23:10:35</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>26</methodCount>
    <crapMethodCount>0</crapMethodCount>
    <crapLoad>0</crapLoad>
    <totalCrap>204.23</totalCrap>
    <crapMethodPercent>0</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Abilities</className>
      <methodName>hasAbility</methodName>
      <methodSignature>hasAbility(mixed $ability): bool</methodSignature>
      <fullMethod>hasAbility(mixed $ability): bool</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Abilities</className>
      <methodName>addAbility</methodName>
      <methodSignature>addAbility(mixed $ability): void</methodSignature>
      <fullMethod>addAbility(mixed $ability): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Abilities</className>
      <methodName>removeAbility</methodName>
      <methodSignature>removeAbility(mixed $ability): void</methodSignature>
      <fullMethod>removeAbility(mixed $ability): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Admin</className>
      <methodName>isAdmin</methodName>
      <methodSignature>isAdmin(): bool</methodSignature>
      <fullMethod>isAdmin(): bool</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Privileges</className>
      <methodName>hasPrivilege</methodName>
      <methodSignature>hasPrivilege(mixed $privilege): bool</methodSignature>
      <fullMethod>hasPrivilege(mixed $privilege): bool</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Privileges</className>
      <methodName>addPrivilege</methodName>
      <methodSignature>addPrivilege(mixed $privilege): void</methodSignature>
      <fullMethod>addPrivilege(mixed $privilege): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Privileges</className>
      <methodName>removePrivilege</methodName>
      <methodSignature>removePrivilege(mixed $privilege): void</methodSignature>
      <fullMethod>removePrivilege(mixed $privilege): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Role</className>
      <methodName>hasRole</methodName>
      <methodSignature>hasRole(mixed $role): bool</methodSignature>
      <fullMethod>hasRole(mixed $role): bool</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Role</className>
      <methodName>addRole</methodName>
      <methodSignature>addRole(mixed $role): void</methodSignature>
      <fullMethod>addRole(mixed $role): void</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\Role</className>
      <methodName>removeRole</methodName>
      <methodSignature>removeRole(mixed $role): void</methodSignature>
      <fullMethod>removeRole(mixed $role): void</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\ScopeFilterColumns</className>
      <methodName>scopeFilterColumns</methodName>
      <methodSignature>scopeFilterColumns(Illuminate\Database\Eloquent\Builder $query, array $columns, array $validated): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterColumns(Illuminate\Database\Eloquent\Builder $query, array $columns, array $validated): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>31</crap>
      <complexity>31</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\ScopeFilterDates</className>
      <methodName>scopeFilterDates</methodName>
      <methodSignature>scopeFilterDates(Illuminate\Database\Eloquent\Builder $query, array $dates, array $validated): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterDates(Illuminate\Database\Eloquent\Builder $query, array $dates, array $validated): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>43</crap>
      <complexity>43</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\ScopeFilterFlags</className>
      <methodName>scopeFilterFlags</methodName>
      <methodSignature>scopeFilterFlags(Illuminate\Database\Eloquent\Builder $query, array $flags, array $validated): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterFlags(Illuminate\Database\Eloquent\Builder $query, array $flags, array $validated): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>9</crap>
      <complexity>9</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\ScopeFilterIds</className>
      <methodName>scopeFilterIds</methodName>
      <methodSignature>scopeFilterIds(Illuminate\Database\Eloquent\Builder $query, array $ids, array $validated): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterIds(Illuminate\Database\Eloquent\Builder $query, array $ids, array $validated): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>27</crap>
      <complexity>27</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\ScopeFilterTrash</className>
      <methodName>scopeFilterTrash</methodName>
      <methodSignature>scopeFilterTrash(Illuminate\Database\Eloquent\Builder $query, string $visibility): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeFilterTrash(Illuminate\Database\Eloquent\Builder $query, string $visibility): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>7</crap>
      <complexity>7</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\ScopeSort</className>
      <methodName>scopeSort</methodName>
      <methodSignature>scopeSort(Illuminate\Database\Eloquent\Builder $query, mixed $sort): Illuminate\Database\Eloquent\Builder</methodSignature>
      <fullMethod>scopeSort(Illuminate\Database\Eloquent\Builder $query, mixed $sort): Illuminate\Database\Eloquent\Builder</fullMethod>
      <crap>16</crap>
      <complexity>16</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\WithChildren</className>
      <methodName>children</methodName>
      <methodSignature>children(): Illuminate\Database\Eloquent\Relations\HasMany</methodSignature>
      <fullMethod>children(): Illuminate\Database\Eloquent\Relations\HasMany</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\WithCreator</className>
      <methodName>creator</methodName>
      <methodSignature>creator(): Illuminate\Database\Eloquent\Relations\HasOne</methodSignature>
      <fullMethod>creator(): Illuminate\Database\Eloquent\Relations\HasOne</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\WithModifier</className>
      <methodName>modifier</methodName>
      <methodSignature>modifier(): Illuminate\Database\Eloquent\Relations\HasOne</methodSignature>
      <fullMethod>modifier(): Illuminate\Database\Eloquent\Relations\HasOne</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\WithOwner</className>
      <methodName>owner</methodName>
      <methodSignature>owner(): Illuminate\Database\Eloquent\Relations\HasOne</methodSignature>
      <fullMethod>owner(): Illuminate\Database\Eloquent\Relations\HasOne</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground\Models\Traits</package>
      <className>Playground\Models\Traits\WithParent</className>
      <methodName>parent</methodName>
      <methodSignature>parent(): Illuminate\Database\Eloquent\Relations\HasOne</methodSignature>
      <fullMethod>parent(): Illuminate\Database\Eloquent\Relations\HasOne</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>boot</methodName>
      <methodSignature>boot(): void</methodSignature>
      <fullMethod>boot(): void</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>about</methodName>
      <methodSignature>about(array $config): void</methodSignature>
      <fullMethod>about(array $config): void</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>userPrimaryKeyType</methodName>
      <methodSignature>userPrimaryKeyType(string $auth_providers_users_model): string</methodSignature>
      <fullMethod>userPrimaryKeyType(string $auth_providers_users_model): string</fullMethod>
      <crap>9.23</crap>
      <complexity>7</complexity>
      <coverage>64.29</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>register</methodName>
      <methodSignature>register(): void</methodSignature>
      <fullMethod>register(): void</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Playground</package>
      <className>Playground\ServiceProvider</className>
      <methodName>version</methodName>
      <methodSignature>version(): string</methodSignature>
      <fullMethod>version(): string</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
